from typing import Optional
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from src.database import get_session
from src.bot.states import SettingsStates
from src.services.user import UserService
from src.utils.i18n import i18n
from src.utils.text_parser import ExpenseParser
from src.core.config import settings

router = Router()
user_service = UserService()
expense_parser = ExpenseParser()


@router.message(F.text == "/settings")
async def cmd_settings(message: Message, state: FSMContext):
    """Show settings menu"""
    telegram_id = message.from_user.id
    
    async with get_session() as session:
        user = await user_service.get_user_by_telegram_id(session, telegram_id)
        if not user:
            await message.answer("/start")
            return
        
        locale = user.language_code
        
        # Format current settings
        text = f"<b>{i18n.get('settings.title', locale)}</b>\n\n"
        
        # Language
        text += f"{i18n.get('settings.language', locale)}: "
        text += "üá∑üá∫ –†—É—Å—Å–∫–∏–π" if locale == 'ru' else "üá∞üáø “ö–∞–∑–∞“õ—à–∞"
        text += "\n"
        
        # Currency
        currency_symbol = expense_parser.CURRENCY_SYMBOLS.get(user.primary_currency, '')
        text += f"{i18n.get('settings.currency', locale)}: {currency_symbol} {user.primary_currency}\n"
        
        # Timezone
        text += f"{i18n.get('settings.timezone', locale)}: {user.timezone}\n"
        
        # Notifications
        notifications_enabled = user.settings.get('notifications_enabled', True) if user.settings else True
        text += f"{i18n.get('settings.notifications', locale)}: "
        text += "‚úÖ" if notifications_enabled else "‚ùå"
        text += "\n"
        
        # Create menu keyboard
        builder = InlineKeyboardBuilder()
        
        menu_items = [
            (f"{i18n.get('settings.language', locale)}", "settings:language"),
            (f"{i18n.get('settings.currency', locale)}", "settings:currency"),
            (f"{i18n.get('settings.timezone', locale)}", "settings:timezone"),
            (f"{i18n.get('settings.notifications', locale)}", "settings:notifications"),
            (f"{i18n.get('settings.limits', locale)}", "settings:limits"),
            (f"üóë {i18n.get('settings.clear_data', locale)}", "settings:clear_data"),
        ]
        
        for text_btn, callback_data in menu_items:
            builder.row(
                InlineKeyboardButton(text=text_btn, callback_data=callback_data)
            )
        
        await message.answer(
            text,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
        
        await state.set_state(SettingsStates.main_menu)


@router.callback_query(F.data == "settings:language", SettingsStates.main_menu)
async def show_language_settings(callback: CallbackQuery, state: FSMContext):
    """Show language selection"""
    telegram_id = callback.from_user.id
    
    async with get_session() as session:
        user = await user_service.get_user_by_telegram_id(session, telegram_id)
        locale = user.language_code
        
        text = f"<b>{i18n.get('settings.language', locale)}</b>\n\n"
        current_lang_text = "–¢–µ–∫—É—â–∏–π —è–∑—ã–∫" if locale == 'ru' else "–ê“ì—ã–º–¥–∞“ì—ã —Ç—ñ–ª"
        text += f"{current_lang_text}: {'üá∑üá∫ –†—É—Å—Å–∫–∏–π' if locale == 'ru' else 'üá∞üáø “ö–∞–∑–∞“õ—à–∞'}\n\n"
        choose_lang_text = "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫" if locale == 'ru' else "–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑"
        text += f"{choose_lang_text}:"
        
        builder = InlineKeyboardBuilder()
        
        if locale != 'ru':
            builder.row(
                InlineKeyboardButton(
                    text="üá∑üá∫ –†—É—Å—Å–∫–∏–π",
                    callback_data="set_language:ru"
                )
            )
        
        if locale != 'kz':
            builder.row(
                InlineKeyboardButton(
                    text="üá∞üáø “ö–∞–∑–∞“õ—à–∞",
                    callback_data="set_language:kz"
                )
            )
        
        builder.row(
            InlineKeyboardButton(
                text=i18n.get_button("back", locale),
                callback_data="back_to_settings"
            )
        )
        
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
        
        await state.set_state(SettingsStates.changing_language)


@router.callback_query(F.data.startswith("set_language:"), SettingsStates.changing_language)
async def set_language(callback: CallbackQuery, state: FSMContext):
    """Set new language"""
    new_language = callback.data.split(":")[1]
    telegram_id = callback.from_user.id
    
    async with get_session() as session:
        user = await user_service.get_user_by_telegram_id(session, telegram_id)
        await user_service.update_user_language(session, user.id, new_language)
        
        await callback.answer(
            i18n.get("welcome.language_set", new_language)
        )
        
        # Update keyboard with new language
        from src.bot.keyboards.main import get_main_keyboard
        await callback.message.answer(
            "‚úÖ",  # Simple confirmation
            reply_markup=get_main_keyboard(new_language)
        )
        
        # Return to settings with new language
        await state.set_state(SettingsStates.main_menu)
        await cmd_settings(callback.message, state)


@router.callback_query(F.data == "settings:currency", SettingsStates.main_menu)
async def show_currency_settings(callback: CallbackQuery, state: FSMContext):
    """Show currency selection"""
    telegram_id = callback.from_user.id
    
    async with get_session() as session:
        user = await user_service.get_user_by_telegram_id(session, telegram_id)
        locale = user.language_code
        
        text = f"<b>{i18n.get('settings.currency', locale)}</b>\n\n"
        current_currency_text = "–¢–µ–∫—É—â–∞—è –≤–∞–ª—é—Ç–∞" if locale == 'ru' else "–ê“ì—ã–º–¥–∞“ì—ã –≤–∞–ª—é—Ç–∞"
        text += f"{current_currency_text}: {user.primary_currency}\n\n"
        choose_currency_text = "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É" if locale == 'ru' else "–ù–µ–≥—ñ–∑–≥—ñ –≤–∞–ª—é—Ç–∞–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑"
        text += f"{choose_currency_text}:"
        
        builder = InlineKeyboardBuilder()
        
        for currency in settings.supported_currencies:
            if currency != user.primary_currency:
                symbol = expense_parser.CURRENCY_SYMBOLS.get(currency, '')
                builder.add(
                    InlineKeyboardButton(
                        text=f"{symbol} {currency}",
                        callback_data=f"set_primary_currency:{currency}"
                    )
                )
        
        builder.adjust(2)  # 2 buttons per row
        
        builder.row(
            InlineKeyboardButton(
                text=i18n.get_button("back", locale),
                callback_data="back_to_settings"
            )
        )
        
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
        
        await state.set_state(SettingsStates.changing_currency)


@router.callback_query(F.data.startswith("set_primary_currency:"), SettingsStates.changing_currency)
async def set_primary_currency(callback: CallbackQuery, state: FSMContext):
    """Set user's primary currency"""
    currency = callback.data.split(":")[1]
    telegram_id = callback.from_user.id
    
    async with get_session() as session:
        user = await user_service.get_user_by_telegram_id(session, telegram_id)
        await user_service.update_user_currency(session, user.id, currency)
        
        locale = user.language_code
        success_text = f"‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {currency}" if locale == 'ru' else f"‚úÖ –ù–µ–≥—ñ–∑–≥—ñ –≤–∞–ª—é—Ç–∞ {currency} –±–æ–ª—ã–ø ”©–∑–≥–µ—Ä—Ç—ñ–ª–¥—ñ"
        await callback.answer(success_text)
        
        # Return to settings
        await state.set_state(SettingsStates.main_menu)
        await cmd_settings(callback.message, state)


@router.callback_query(F.data == "settings:notifications", SettingsStates.main_menu)
async def toggle_notifications(callback: CallbackQuery, state: FSMContext):
    """Toggle notifications on/off"""
    telegram_id = callback.from_user.id
    
    async with get_session() as session:
        user = await user_service.get_user_by_telegram_id(session, telegram_id)
        locale = user.language_code
        
        # Get current state
        current_settings = user.settings or {}
        notifications_enabled = current_settings.get('notifications_enabled', True)
        
        # Toggle
        current_settings['notifications_enabled'] = not notifications_enabled
        user.settings = current_settings
        
        await session.commit()
        
        if locale == 'ru':
            new_state = "–≤–∫–ª—é—á–µ–Ω—ã" if not notifications_enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
            answer_text = f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {new_state}"
        else:
            new_state = "“õ–æ—Å—ã–ª–¥—ã" if not notifications_enabled else "”©—à—ñ—Ä—ñ–ª–¥—ñ"
            answer_text = f"‚úÖ –•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä {new_state}"
        await callback.answer(answer_text)
        
        # Refresh settings
        await cmd_settings(callback.message, state)


@router.callback_query(F.data == "settings:limits", SettingsStates.main_menu)
async def show_limits_settings(callback: CallbackQuery, state: FSMContext):
    """Show spending limits settings"""
    telegram_id = callback.from_user.id
    async with get_session() as session:
        user = await user_service.get_user_by_telegram_id(session, telegram_id)
        locale = user.language_code
        
    message_text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ" if locale == 'ru' else "–õ–∏–º–∏—Ç—Ç–µ—Ä–¥—ñ –±–∞—Å“õ–∞—Ä—É ”ô–∑—ñ—Ä–ª–µ–Ω—É–¥–µ"
    await callback.answer(message_text, show_alert=True)


@router.callback_query(F.data == "settings:timezone", SettingsStates.main_menu)
async def show_timezone_settings(callback: CallbackQuery, state: FSMContext):
    """Show timezone selection"""
    telegram_id = callback.from_user.id
    
    async with get_session() as session:
        user = await user_service.get_user_by_telegram_id(session, telegram_id)
        locale = user.language_code
        
        text = f"<b>{i18n.get('settings.timezone', locale)}</b>\n\n"
        current_tz_text = "–¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å" if locale == 'ru' else "–ê“ì—ã–º–¥–∞“ì—ã —É–∞“õ—ã—Ç –±–µ–ª–¥–µ—É—ñ"
        text += f"{current_tz_text}: {user.timezone}\n\n"
        choose_tz_text = "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å" if locale == 'ru' else "–£–∞“õ—ã—Ç –±–µ–ª–¥–µ—É—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑"
        text += f"{choose_tz_text}:"
        
        builder = InlineKeyboardBuilder()
        
        timezones = [
            ("üá∞üáø –ê–ª–º–∞—Ç—ã (UTC+6)", "Asia/Almaty"),
            ("üá∞üáø –ê—Å—Ç–∞–Ω–∞ (UTC+6)", "Asia/Qostanay"),
            ("üá∑üá∫ –ú–æ—Å–∫–≤–∞ (UTC+3)", "Europe/Moscow"),
            ("üá∑üá∫ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ (UTC+5)", "Asia/Yekaterinburg"),
            ("üá∑üá∫ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ (UTC+7)", "Asia/Novosibirsk"),
            ("üá∑üá∫ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫ (UTC+10)", "Asia/Vladivostok"),
        ]
        
        for tz_name, tz_value in timezones:
            if tz_value != user.timezone:
                builder.row(
                    InlineKeyboardButton(
                        text=tz_name,
                        callback_data=f"set_timezone:{tz_value}"
                    )
                )
        
        builder.row(
            InlineKeyboardButton(
                text=i18n.get_button("back", locale),
                callback_data="back_to_settings"
            )
        )
        
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
        
        await state.set_state(SettingsStates.changing_timezone)


@router.callback_query(F.data.startswith("set_timezone:"), SettingsStates.changing_timezone)
async def set_timezone(callback: CallbackQuery, state: FSMContext):
    """Set new timezone"""
    timezone = callback.data.split(":", 1)[1]
    telegram_id = callback.from_user.id
    
    async with get_session() as session:
        user = await user_service.get_user_by_telegram_id(session, telegram_id)
        await user_service.update_user_timezone(session, user.id, timezone)
        
        locale = user.language_code
        success_text = f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {timezone}" if locale == 'ru' else f"‚úÖ –£–∞“õ—ã—Ç –±–µ–ª–¥–µ—É—ñ {timezone} –±–æ–ª—ã–ø ”©–∑–≥–µ—Ä—Ç—ñ–ª–¥—ñ"
        await callback.answer(success_text)
        
        # Return to settings
        await state.set_state(SettingsStates.main_menu)
        await cmd_settings(callback.message, state)


@router.callback_query(F.data == "settings:clear_data", SettingsStates.main_menu)
async def show_clear_data_confirmation(callback: CallbackQuery, state: FSMContext):
    """Show clear data confirmation dialog"""
    telegram_id = callback.from_user.id
    
    async with get_session() as session:
        user = await user_service.get_user_by_telegram_id(session, telegram_id)
        locale = user.language_code
        
        # Get transaction count
        from src.services.transaction import TransactionService
        transaction_service = TransactionService()
        transactions = await transaction_service.get_user_transactions(
            session, user.id, limit=None
        )
        transaction_count = len(transactions)
        
        if transaction_count == 0:
            no_data_text = "–£ –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è" if locale == 'ru' else "–°—ñ–∑–¥–µ –∂–æ—é “Ø—à—ñ–Ω –¥–µ—Ä–µ–∫—Ç–µ—Ä –∂–æ“õ"
            await callback.answer(no_data_text, show_alert=True)
            return
        
        # Warning text
        if locale == 'ru':
            text = f"<b>‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            text += f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ?\n\n"
            text += f"–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:\n"
            text += f"‚Ä¢ {transaction_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
            text += f"‚Ä¢ –í—Å—è –∏—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤\n"
            text += f"‚Ä¢ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n\n"
            text += f"<b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!</b>"
        else:
            text = f"<b>‚ö†Ô∏è –ë–∞—Ä–ª—ã“õ –¥–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –∂–æ—é</b>\n\n"
            text += f"–ë–∞—Ä–ª—ã“õ –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ“£—ñ–∑–¥—ñ –∂–æ–π“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ?\n\n"
            text += f"–ñ–æ–π—ã–ª–∞–¥—ã:\n"
            text += f"‚Ä¢ {transaction_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è\n"
            text += f"‚Ä¢ –ë–∞—Ä–ª—ã“õ —à—ã“ì—ã—Å—Ç–∞—Ä —Ç–∞—Ä–∏—Ö—ã\n"
            text += f"‚Ä¢ –ë–∞—Ä–ª—ã“õ —Å–∞–Ω–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä—ñ\n\n"
            text += f"<b>–ë“±–ª ”ô—Ä–µ–∫–µ—Ç—Ç—ñ “õ–∞–π—Ç–∞—Ä—É –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å!</b>"
        
        builder = InlineKeyboardBuilder()
        
        # Confirmation buttons
        confirm_text = "üóë –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë" if locale == 'ru' else "üóë –ò”ô, –±–∞—Ä–ª—ã“ì—ã–Ω –∂–æ—é"
        cancel_text = "‚ùå –û—Ç–º–µ–Ω–∞" if locale == 'ru' else "‚ùå –ë–∞—Å —Ç–∞—Ä—Ç—É"
        
        builder.row(
            InlineKeyboardButton(
                text=confirm_text,
                callback_data="confirm_clear_data"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text=cancel_text,
                callback_data="back_to_settings"
            )
        )
        
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
        
        await state.set_state(SettingsStates.confirming_clear_data)


@router.callback_query(F.data == "confirm_clear_data", SettingsStates.confirming_clear_data)
async def confirm_clear_data(callback: CallbackQuery, state: FSMContext):
    """Clear all user data after confirmation"""
    telegram_id = callback.from_user.id
    
    async with get_session() as session:
        user = await user_service.get_user_by_telegram_id(session, telegram_id)
        locale = user.language_code
        
        # Show processing message
        processing_text = "üîÑ –£–¥–∞–ª—è—é –¥–∞–Ω–Ω—ã–µ..." if locale == 'ru' else "üîÑ –î–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –∂–æ—é..."
        await callback.message.edit_text(processing_text)
        
        try:
            # Delete all transactions
            from src.services.transaction import TransactionService
            from src.services.category import CategoryService
            from sqlalchemy import delete
            from src.database.models import Transaction, Category
            
            # Delete all user transactions
            await session.execute(
                delete(Transaction).where(Transaction.user_id == user.id)
            )
            
            # Delete all non-default categories
            await session.execute(
                delete(Category).where(
                    Category.user_id == user.id,
                    Category.is_default == False
                )
            )
            
            # Reset user settings to defaults
            user.settings = {}
            
            await session.commit()
            
            # Recreate default categories
            category_service = CategoryService()
            await category_service.create_default_categories(session, user.id)
            await session.commit()
            
            # Success message
            success_text = "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã" if locale == 'ru' else "‚úÖ –ë–∞—Ä–ª—ã“õ –¥–µ—Ä–µ–∫—Ç–µ—Ä —Å”ô—Ç—Ç—ñ –∂–æ–π—ã–ª–¥—ã"
            await callback.message.edit_text(success_text)
            
            # Return to main menu after 2 seconds
            import asyncio
            await asyncio.sleep(2)
            
            # Send welcome message
            welcome_text = i18n.get("welcome.tutorial", locale)
            await callback.message.answer(welcome_text)
            
        except Exception as e:
            error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö" if locale == 'ru' else "‚ùå –î–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –∂–æ—é –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ"
            await callback.message.edit_text(error_text)
            
        await state.clear()


@router.callback_query(F.data == "back_to_settings")
async def back_to_settings(callback: CallbackQuery, state: FSMContext):
    """Return to main settings menu"""
    await state.set_state(SettingsStates.main_menu)
    await cmd_settings(callback.message, state)